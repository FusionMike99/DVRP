using DVRP.Domain.Entities;

namespace DVRP.Application.Helpers;

public static class InitializationMethods
{
    public static List<VehicleRoute> NearestNeighborInitialization(DvrpModel model)
    {
        var routes = new List<VehicleRoute>();
        var remainingCustomers = new List<Customer>(model.Customers);

        while (remainingCustomers.Count > 0)
        {
            foreach (var vehicle in model.Vehicles)
            {
                if (remainingCustomers.Count == 0) break;

                var depot = model.Depots.First(d => d.Id == vehicle.DepotId);
                var route = new VehicleRoute { Vehicle = vehicle, Locations = new() { depot } };  // Start from the depot
                Location currentLocation = depot with { };
                double currentCapacity = vehicle.Capacity;

                while (remainingCustomers.Count > 0 && currentCapacity > 0)
                {
                    var nearestCustomer = remainingCustomers.OrderBy(c => c.CalculateDistance(currentLocation)).First();

                    if (nearestCustomer.Demand <= currentCapacity)
                    {
                        route.Locations.Add(nearestCustomer);
                        currentCapacity -= nearestCustomer.Demand;
                        remainingCustomers.Remove(nearestCustomer);
                        currentLocation = nearestCustomer;
                    }
                    else
                    {
                        break;
                    }
                }

                route.Locations.Add(depot);  // Return to the depot
                routes.Add(route);
            }
        }

        return routes;
    }

    public static List<VehicleRoute> RandomInitialization(DvrpModel model, Random random)
    {
        var routes = new List<VehicleRoute>();
        var remainingCustomers = new List<Customer>(model.Customers.OrderBy(c => random.Next()));

        while (remainingCustomers.Count > 0)
        {
            foreach (var vehicle in model.Vehicles)
            {
                if (remainingCustomers.Count == 0) break;

                var depot = model.Depots.First(d => d.Id == vehicle.DepotId);
                var route = new VehicleRoute { Vehicle = vehicle, Locations = new() { depot } };
                double currentCapacity = vehicle.Capacity;

                while (remainingCustomers.Count > 0 && currentCapacity > 0)
                {
                    var customer = remainingCustomers.First();

                    if (customer.Demand <= currentCapacity)
                    {
                        route.Locations.Add(customer);
                        currentCapacity -= customer.Demand;
                        remainingCustomers.Remove(customer);
                    }
                    else
                    {
                        break;
                    }
                }

                route.Locations.Add(depot);  // Return to the depot
                routes.Add(route);
            }
        }

        return routes;
    }

    public static DvrpSolution HybridInitialization(DvrpModel model, double heuristicRatio)
    {
        var random = new Random();
        var solution = new DvrpSolution();

        // Calculate the number of routes to be generated by the heuristic
        int heuristicRoutesCount = (int)(heuristicRatio * model.Vehicles.Count);

        // Generate routes using the heuristic
        var heuristicRoutes = NearestNeighborInitialization(model).Take(heuristicRoutesCount);
        solution.Routes.AddRange(heuristicRoutes);

        // Generate the remaining routes randomly
        var randomRoutes = RandomInitialization(model, random).Skip(heuristicRoutesCount);
        solution.Routes.AddRange(randomRoutes);

        return solution;
    }
}
